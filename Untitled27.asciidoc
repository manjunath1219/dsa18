+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 1. **Merge Intervals**

Given an arrayÂ ofÂ `intervals`Â whereÂ `intervals[i] = [starti, endi]`, merge all overlapping intervals, and returnÂ *an array of the non-overlapping intervals that cover all the intervals in the input*.

**Example 1:**

```
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

```

**Example 2:**

```
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

```

**Constraints:**

- `1 <= intervals.length <= 10000`
- `intervals[i].length == 2`
- `0 <= starti <= endi <= 10000`

----


+*In[1]:*+
[source, ipython3]
----
def merge_intervals(intervals):
    # Sort the intervals based on start times
    intervals.sort(key=lambda x: x[0])
    
    # Initialize the result list with the first interval
    merged = [intervals[0]]
    
    # Iterate through the intervals
    for interval in intervals[1:]:
        # Check if the current interval overlaps with the last interval in the result list
        if interval[0] <= merged[-1][1]:
            # Merge the intervals by updating the end time of the last interval if necessary
            merged[-1][1] = max(merged[-1][1], interval[1])
        else:
            # Add the non-overlapping interval to the result list
            merged.append(interval)
    
    return merged
intervals1 = [[1, 3], [2, 6], [8, 10], [15, 18]]
print(merge_intervals(intervals1))

intervals2 = [[1, 4], [4, 5]]
print(merge_intervals(intervals2))
----


+*Out[1]:*+
----
[[1, 6], [8, 10], [15, 18]]
[[1, 5]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 2. **Sort Colors**

Given an arrayÂ `nums`Â withÂ `n`Â objects colored red, white, or blue, sort themÂ **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**Â so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integersÂ `0`,Â `1`, andÂ `2`Â to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

**Example 1:**

```
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

```

**Example 2:**

```
Input: nums = [2,0,1]
Output: [0,1,2]

```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 300`
- `nums[i]`Â is eitherÂ `0`,Â `1`, orÂ `2`.

----


+*In[2]:*+
[source, ipython3]
----
def sort_colors(nums):
    low = 0  # Boundary for 0's
    mid = 0  # Boundary for 1's
    high = len(nums) - 1  # Boundary for 2's
    
    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:  # nums[mid] == 2
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1
    
    return nums
nums1 = [2, 0, 2, 1, 1, 0]
print(sort_colors(nums1))

nums2 = [2, 0, 1]
print(sort_colors(nums2))
----


+*Out[2]:*+
----
[0, 0, 1, 1, 2, 2]
[0, 1, 2]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 3. **First Bad Version Solution**

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you haveÂ `n`Â versionsÂ `[1, 2, ..., n]`Â and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an APIÂ `bool isBadVersion(version)`Â which returns whetherÂ `version`Â is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

**Example 1:**

```
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5)Â -> true
call isBadVersion(4)Â -> true
Then 4 is the first bad version.

```

**Example 2:**

```
Input: n = 1, bad = 1
Output: 1

```

**Constraints:**

- `1 <= bad <= n <= 2^31Â - 1`
</aside>
----


+*In[3]:*+
[source, ipython3]
----
def isBadVersion(version):
    # Example implementation of the isBadVersion() API
    return version >= bad_version

def first_bad_version(n):
    left = 1
    right = n
    
    while left < right:
        mid = left + (right - left) // 2
        
        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1
    
    return left
bad_version = 4

def isBadVersion(version):
    return version >= bad_version

n = 5
print(first_bad_version(n))
----


+*Out[3]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 4. **Maximum Gap**

Given an integer arrayÂ `nums`, returnÂ *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, returnÂ `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

**Example 1:**

```
Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.

```

**Example 2:**

```
Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.

```

**Constraints:**

- `1 <= nums.length <= 10^5`
- `0 <= nums[i] <= 10^9`
</aside>
----


+*In[4]:*+
[source, ipython3]
----
def maximum_gap(nums):
    if len(nums) < 2:
        return 0

    # Find the minimum and maximum values in the array
    min_val = min(nums)
    max_val = max(nums)
    n = len(nums)

    # Calculate the gap and the number of buckets
    gap = max(1, (max_val - min_val) // (n - 1))
    num_buckets = (max_val - min_val) // gap + 1

    # Initialize the buckets
    buckets_min = [float('inf')] * num_buckets
    buckets_max = [float('-inf')] * num_buckets

    # Distribute the elements into the buckets
    for num in nums:
        index = (num - min_val) // gap
        buckets_min[index] = min(buckets_min[index], num)
        buckets_max[index] = max(buckets_max[index], num)

    # Calculate the maximum gap
    max_gap = 0
    prev_max = min_val

    for i in range(num_buckets):
        if buckets_min[i] == float('inf') and buckets_max[i] == float('-inf'):
            # Empty bucket
            continue
        max_gap = max(max_gap, buckets_min[i] - prev_max)
        prev_max = buckets_max[i]

    return max_gap
nums1 = [3, 6, 9, 1]
print(maximum_gap(nums1))

nums2 = [10]
print(maximum_gap(nums2))
----


+*Out[4]:*+
----
3
0
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 5. **Contains Duplicate**

Given an integer arrayÂ `nums`, returnÂ `true`Â if any value appearsÂ **at least twice**Â in the array, and returnÂ `false`Â if every element is distinct.

**Example 1:**

```
Input: nums = [1,2,3,1]
Output: true

```

**Example 2:**

```
Input: nums = [1,2,3,4]
Output: false

```

**Example 3:**

```
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

```

**Constraints:**

- `1 <= nums.length <= 10^5`
- `109 <= nums[i] <= 10^9`
</aside>
----


+*In[5]:*+
[source, ipython3]
----
def contains_duplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)

    return False
nums1 = [1, 2, 3, 1]
print(contains_duplicate(nums1))

nums2 = [1, 2, 3, 4]
print(contains_duplicate(nums2))

nums3 = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]
print(contains_duplicate(nums3))
----


+*Out[5]:*+
----
True
False
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 6. **Minimum Number of Arrows to Burst Balloons**

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer arrayÂ `points`Â whereÂ `points[i] = [xstart, xend]`Â denotes a balloon whoseÂ **horizontal diameter**Â stretches betweenÂ `xstart`Â andÂ `xend`. You do not know the exact y-coordinates of the balloons.

Arrows can be shot upÂ **directly vertically**Â (in the positive y-direction) from different points along the x-axis. A balloon withÂ `xstart`Â andÂ `xend`Â isÂ **burst**Â by an arrow shot atÂ `x`Â ifÂ `xstart <= x <= xend`. There isÂ **no limit**Â to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the arrayÂ `points`, returnÂ *theÂ **minimum**Â number of arrows that must be shot to burst all balloons*.

**Example 1:**

```
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].

```

**Example 2:**

```
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.

```

**Example 3:**

```
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].

```

**Constraints:**

- `1 <= points.length <= 10^5`
- `points[i].length == 2`
- `231 <= xstart < xend <= 2^31 - 1`
</aside>
----


+*In[6]:*+
[source, ipython3]
----
def find_min_arrow_shots(points):
    if not points:
        return 0
    
    points.sort(key=lambda x: x[1])  # Sort balloons based on end points
    arrows = 1  # At least one arrow is needed
    end = points[0][1]  # Minimum end point
    
    for i in range(1, len(points)):
        if points[i][0] > end:
            # Balloon cannot be burst by the same arrow
            arrows += 1
            end = points[i][1]
    
    return arrows
points1 = [[10, 16], [2, 8], [1, 6], [7, 12]]
print(find_min_arrow_shots(points1))

points2 = [[1, 2], [3, 4], [5, 6], [7, 8]]
print(find_min_arrow_shots(points2))

points3 = [[1, 2], [2, 3], [3, 4], [4, 5]]
print(find_min_arrow_shots(points3))
----


+*Out[6]:*+
----
2
4
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 7. **Longest Increasing Subsequence**

Given an integer arrayÂ `nums`, returnÂ *the length of the longestÂ **strictly increasing***

***subsequence***

.

**Example 1:**

```
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

```

**Example 2:**

```
Input: nums = [0,1,0,3,2,3]
Output: 4

```

**Example 3:**

```
Input: nums = [7,7,7,7,7,7,7]
Output: 1

```

**Constraints:**

- `1 <= nums.length <= 2500`
- `-10^4 <= nums[i] <= 10^4`
</aside>
----


+*In[7]:*+
[source, ipython3]
----
def length_of_lis(nums):
    if not nums:
        return 0

    n = len(nums)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
nums1 = [10, 9, 2, 5, 3, 7, 101, 18]
print(length_of_lis(nums1))

nums2 = [0, 1, 0, 3, 2, 3]
print(length_of_lis(nums2))

nums3 = [7, 7, 7, 7, 7, 7, 7]
print(length_of_lis(nums3))
----


+*Out[7]:*+
----
4
4
1
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ğŸ’¡ 8. **132 Pattern**

Given an array ofÂ `n`Â integersÂ `nums`, aÂ **132 pattern**Â is a subsequence of three integersÂ `nums[i]`,Â `nums[j]`Â andÂ `nums[k]`Â such thatÂ `i < j < k`Â andÂ `nums[i] < nums[k] < nums[j]`.

ReturnÂ `true`Â *if there is aÂ **132 pattern**Â in*Â `nums`*, otherwise, return*Â `false`*.*

**Example 1:**

```
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

```

**Example 2:**

```
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

```

**Example 3:**

```
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 2 * 10^5`
- `-10^9 <= nums[i] <= 10^9`
</aside>
----


+*In[8]:*+
[source, ipython3]
----
def find132pattern(nums):
    stack = []
    third = float('-inf')

    for i in range(len(nums) - 1, -1, -1):
        if nums[i] < third:
            return True
        while stack and nums[i] > stack[-1]:
            third = stack.pop()
        stack.append(nums[i])

    return False
nums1 = [1, 2, 3, 4]
print(find132pattern(nums1))

nums2 = [3, 1, 4, 2]
print(find132pattern(nums2))

nums3 = [-1, 3, 2, 0]
print(find132pattern(nums3))
----


+*Out[8]:*+
----
False
True
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
